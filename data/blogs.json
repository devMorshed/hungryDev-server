{
	"blogs": [
		{
			"id": 1,
			"question": "What is the difference between controlled and uncontrolled components in React?",
			"answer": "In React, a controlled component is one that is entirely controlled by React, whereas an uncontrolled component is one that maintains its state internally. A controlled component receives its current value and any changes to it via props passed down from the parent component. This means that the parent component has complete control over the state of the controlled component. In contrast, an uncontrolled component maintains its state internally, which means that it can change its state independently of the parent component. In example we can talk about log in forms of this website, if we store the values of inputs fields in a state by a handleChange function and use it for future refferences then it'll be a controlled component. "
		},
		{
			"id": 2,
			"question": "How can you validate React props using PropTypes?",
			"answer": "We share data between components of react using states and props. The data we pass through props could be any valid type data but it may be not suitable or right for the destination component. In short, PropTypes provides a set of validators that can be used to check the type and shape of the props.To check the props using PropTypes we can use different classname for different types of data. In example: PropType.string for String."
		},
		{
			"id": 3,
			"question": "What is the difference between Node.js and Express.js?",
			"answer": "Node.js is a runtime environment that allows us to run JavaScript on the server-side. If we want to build a simple web application that displays a list of products from a database. We could use Node.js to create a server that listens for requests from the client-side and sends the appropriate response back. However, building the routing and middleware necessary to handle these requests would be a lot of work Instead, we could use Express.js to build the routing and middleware for us. With Express.js, we could create a route that handles requests for the product list, and use middleware to handle things like authentication and error handling."
		},
		{
			"id": 4,
			"question": "What is a custom hook, and why would you create one?",
			"answer": "In React, a custom hook is a JavaScript function that starts with the 'use' keyword and allows us to use stateful logic in functional components. Custom hooks makes stateful logic easier and reusable across multiple components. We would create a custom hook when we find see that we are repeating the same logic in multiple components."
		}
	]
}
